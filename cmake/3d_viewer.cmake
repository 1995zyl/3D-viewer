macro(find_qt_package)
    if(NOT EXISTS ${QT_SDK_DIR})
        message(STATUS "QT_SDK_DIR not found, try to read from environment variable: QTDIR")
        set(QT_SDK_DIR "$ENV{QTDIR}" CACHE STRING "QT_SDK_DIR read from environment variable: QTDIR" FORCE)
    endif()
    
    set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${QT_SDK_DIR})
    find_package(QT NAMES Qt6 Qt5 COMPONENTS Core 3DCore 3DRender 3DExtras 3DAnimation REQUIRED)
    find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core 3DCore 3DRender 3DExtras 3DAnimation REQUIRED)
    
    set(Qt_VERSION ${Qt${QT_VERSION_MAJOR}Core_VERSION})
    set(CMAKE_GLOBAL_AUTOGEN_TARGET OFF)
    set(CMAKE_AUTOMOC ON)
    set(CMAKE_AUTORCC ON)
    set(CMAKE_AUTOUIC ON)
    set(CMAKE_INCLUDE_CURRENT_DIR ON)

    add_definitions(-DQT_SDK_DIR="${QT_SDK_DIR}")
endmacro()

macro(find_assimp_library)
    if(WIN32)
        set(SYSTEM_TYPE "win")
    else()
        set(SYSTEM_TYPE "linux")
    endif(WIN32)
    set(ASSIMP_PATH "${PROJECT_SOURCE_DIR}/3rdparty/assimpSceneImportExPlugin/3rdparty/assimp_install/${SYSTEM_TYPE}/${CMAKE_BUILD_TYPE}")
    if(NOT EXISTS ${ASSIMP_PATH})
        message(FATAL_ERROR "not found assimp...")
    endif()
endmacro()

macro(find_stb_library)
    set(STB_PATH "${PROJECT_SOURCE_DIR}/3rdparty/assimpSceneImportExPlugin/3rdparty/stb")
    if(NOT EXISTS ${STB_PATH})
        message(FATAL_ERROR "not found stb...")
    endif()
endmacro()

macro(find_spdlog_library)
    set(SPDLOG_PATH "${PROJECT_SOURCE_DIR}/3rdparty/spdlog/include")
    if(NOT EXISTS ${SPDLOG_PATH})
        message(FATAL_ERROR "not found spdlog...")
    endif()
endmacro()

macro(source_group_by_dir source_files)
    if(MSVC)
        set(sgbd_cur_dir ${CMAKE_CURRENT_SOURCE_DIR})
        foreach(sgbd_file ${${source_files}})
            string(REGEX REPLACE ${sgbd_cur_dir}/\(.*\) \\1 sgbd_fpath ${sgbd_file})
            string(REGEX REPLACE "\(.*\)/.*" \\1 sgbd_group_name ${sgbd_fpath})
            string(COMPARE EQUAL ${sgbd_fpath} ${sgbd_group_name} sgbd_nogroup)
            string(REPLACE "/" "\\" sgbd_group_name ${sgbd_group_name})
            if(sgbd_nogroup)
                set(sgbd_group_name "\\")
            endif(sgbd_nogroup)
            source_group(${sgbd_group_name} FILES ${sgbd_file})
        endforeach(sgbd_file)
    endif(MSVC)
endmacro(source_group_by_dir)

macro(execute_qt_translate replace_dir ${translate_path})
    # file(REMOVE ${CMAKE_CURRENT_SOURCE_DIR}/source/ZH_CN.ts)
    execute_process(COMMAND lupdate ${translate_path} -ts ${replace_dir} WORKING_DIRECTORY ${QT_SDK_DIR}/bin)
    set(QM_FILE ${replace_dir})
    string(REPLACE ".ts" ".qm" QM_FILE ${QM_FILE})
    execute_process(COMMAND lrelease ${replace_dir} -qm ${QM_FILE} WORKING_DIRECTORY ${QT_SDK_DIR}/bin)
endmacro()

macro(execute_qt_rcc origin_dir replace_dir ${rcc_path})
    foreach(RCC_FILE ${rcc_path})
        set(H_FILE ${RCC_FILE})
        string(REPLACE "${origin_dir}/" "${replace_dir}/qrc_" H_FILE ${H_FILE})
        string(REPLACE ".qrc" ".cpp" H_FILE ${H_FILE})
        execute_process(COMMAND rcc ${RCC_FILE} -o ${H_FILE} WORKING_DIRECTORY ${QT_SDK_DIR}/bin)
    endforeach()
endmacro()
